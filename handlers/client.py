from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from .others import data_forecast

from Buttons import markups

from create_bot import client, date, translator

from image_converter import ImageConverter


class Form(StatesGroup):
    language = State()  # Will be represented in storage as 'Form:language'
    city = State()  # Will be represented in storage as 'Form:city'


async def command_start(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        pass
    else:
        await state.finish()

    await Form.language.set()
    # username = message.from_user.first_name
    resp_message = "Please choose the language of communication.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è."
    await message.answer(resp_message, reply_markup=markups.lang_buttons)


async def command_help(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        language = data['language']
        if language == "üá¨üáß English":
            await message.answer("I can tell you about the weather in all cities, "
                                 "write commands\n/start or /weather to start interacting with the bot.")
        else:
            await message.answer("–Ø –º–æ–∂—É —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –ø–æ–≥–æ–¥—É –≤ —É—Å—ñ—Ö –º—ñ—Å—Ç–∞—Ö, "
                                 "–Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥–∏\n/start –∞–±–æ /weather —â–æ–± –ø–æ—á–∞—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ –±–æ—Ç–æ–º.")


async def process_language(message: types.Message, state: FSMContext):
    language = message.text
    async with state.proxy() as data:
        data['language'] = language

    if language == "üá¨üáß English":
        await Form.next()
        await message.answer("Please enter the name of the city you need.")
    elif language == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞":
        await Form.next()
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –≤–∞–º –º—ñ—Å—Ç–∞.")
    else:
        await message.answer("Please click on button to choose the language.\n"
                             "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± –æ–±—Ä–∞—Ç–∏ –º–æ–≤—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.")


async def process_city(message: types.Message, state: FSMContext):
    city = message.text
    async with state.proxy() as data:
        data['city'] = city
        if data['language'] == "üá¨üáß English":
            resp_message = "Please choose information what you need about this city:"
            await message.answer(resp_message, reply_markup=markups.action_catalog)
        else:
            resp_message = "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ —Ü–µ –º—ñ—Å—Ç–æ:"
            await message.answer(resp_message, reply_markup=markups.action_catalog_ua)


async def return_to_main_menu(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['language'] == "üá¨üáß English":
            resp_message = "Please choose information what you need about this city:"
            await call.message.edit_text(text=resp_message, reply_markup=markups.action_catalog)
        else:
            resp_message = "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ —Ü–µ –º—ñ—Å—Ç–æ:"
            await call.message.edit_text(text=resp_message, reply_markup=markups.action_catalog_ua)


async def process_closing(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['language'] == "üá¨üáß English":
            resp_message = "Please enter the city you need."
        else:
            resp_message = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —è–∫–µ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ."
    await Form.city.set()
    await call.message.answer(resp_message)


async def process_temperature(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        weather = await client.get(data['city'])

        celsius = weather.current.temperature
        translation_kind = translator.translate(weather.current.kind.__str__())
        translation_area = translator.translate(f"{weather.nearest_area.name}; {weather.nearest_area.country}")

        if data['language'] == "üá¨üáß English":
            resp_msg = f"{weather.nearest_area.name}; {weather.nearest_area.country}\n\n"
            resp_msg += f"Current temperature: {celsius}¬∞C\n"
            resp_msg += f"Feels like: {weather.current.feels_like}¬∞C\n"
            resp_msg += f"State of the weather: {weather.current.kind}\n\n"
            if celsius <= 10:
                resp_msg += "Cool! Dress warmer!"
            else:
                resp_msg += "Warmth! Dress easier!"
        else:
            resp_msg = f"{translation_area}\n\n"
            resp_msg += f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞—Ä–∞–∑: {celsius}¬∞C\n"
            resp_msg += f"–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è, —è–∫: {weather.current.feels_like}¬∞C\n"
            resp_msg += f"–°—Ç–∞–Ω –ø–æ–≥–æ–¥–∏: {translation_kind}\n\n"
            if celsius <= 10:
                resp_msg += "–ü—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ! –û–¥—è–≥–∞–π—Å—è —Ç–µ–ø–ª—ñ—à–µ!"
            else:
                resp_msg += "–¢–µ–ø–ª–æ! –û–¥—è–≥–∞–π—Å—è –ª–µ–≥—à–µ!"

        await call.message.answer(resp_msg)


async def process_wind_speed(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        weather = await client.get(data['city'])
        wind_speed = weather.current.wind_speed

        if data['language'] == "üá¨üáß English":
            resp_msg = f"Wind speed: {wind_speed} km/h"
        else:
            resp_msg = f"–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {wind_speed} –∫–º/–≥–æ–¥"

        if wind_speed >= 39:
            photo = open('Images/strong_wind.jpg', 'rb')
            if data['language'] == "üá¨üáß English":
                resp_msg += ", Strong wind"
            else:
                resp_msg += ", –°–∏–ª—å–Ω–∏–π –≤—ñ—Ç–µ—Ä"
        else:
            photo = open('Images/wind.jpg', 'rb')
            if data['language'] == "üá¨üáß English":
                resp_msg += ", Light wind"
            else:
                resp_msg += ", –õ–µ–≥–∫–∏–π –≤—ñ—Ç–µ—Ä"

        await call.message.answer_photo(photo, caption=resp_msg)


async def process_visibility(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        weather = await client.get(data['city'])
        visibility = weather.current.visibility

        if data['language'] == "üá¨üáß English":
            resp_msg = f"Visibility: {visibility} km"
        else:
            resp_msg = f"–í–∏–¥–∏–º—ñ—Å—Ç—å: {visibility} –∫–º"

        if visibility <= 2:
            photo = open('Images/bad_visibility.jpg', 'rb')
            if data['language'] == "üá¨üáß English":
                resp_msg += ", Bad visibility"
            else:
                resp_msg += ", –ü–æ–≥–∞–Ω–∞ –≤–∏–¥–∏–º—ñ—Å—Ç—å"
        else:
            photo = open('Images/good_visibility.jpg', 'rb')
            if data['language'] == "üá¨üáß English":
                resp_msg += ", Good visibility"
            else:
                resp_msg += ", –•–æ—Ä–æ—à–∞ –≤–∏–¥–∏–º—ñ—Å—Ç—å"

        await call.message.answer_photo(photo, caption=resp_msg)


async def process_humidity(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        weather = await client.get(data['city'])
        humidity = weather.current.humidity

        if data['language'] == "üá¨üáß English":
            resp_msg = f"Current percentage of humidity: {humidity}%"
        else:
            resp_msg = f"–ü–æ—Ç–æ—á–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤–æ–ª–æ–≥–æ—Å—Ç—ñ: {humidity}%"

        if humidity > 70:
            photo = open('Images/high_humidity.jpg', 'rb')
        elif humidity < 40:
            photo = open('Images/low_humidity.jpg', 'rb')
        else:
            photo = open('Images/norm_humidity.jpg', 'rb')

        await call.message.answer_photo(photo, caption=resp_msg)


async def process_sun_rise_set(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        weather = await client.get(data['city'])

        if data['language'] == "üá¨üáß English":
            resp_msg = "Three day of sun information.\n\n"
            for forecast in weather.forecasts:
                resp_msg += f"Date: {forecast.date}\n"
                resp_msg += f"Sun rise: {forecast.astronomy.sun_rise}\n"
                resp_msg += f"Sun set: {forecast.astronomy.sun_set}\n\n"
        else:
            resp_msg = "–¢—Ä–∏–¥–µ–Ω–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–æ–Ω—Ü–µ.\n\n"
            for forecast in weather.forecasts:
                resp_msg += f"–î–∞—Ç–∞: {forecast.date}\n"
                resp_msg += f"–°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {forecast.astronomy.sun_rise}\n"
                resp_msg += f"–ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {forecast.astronomy.sun_set}\n\n"

        await call.message.answer(resp_msg)


async def process_moon_phase(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        weather = await client.get(data['city'])

        if data['language'] == "üá¨üáß English":
            resp_msg = "Three-day moon phase forecast.\n\n"
            for forecast in weather.forecasts:
                resp_msg += f"Date: {forecast.date}\n"
                resp_msg += f"Moon phase: {forecast.astronomy.moon_phase}\n"
                resp_msg += f"Moon illumination - {forecast.astronomy.moon_illumination}%\n\n"
        else:
            resp_msg = "–ü—Ä–æ–≥–Ω–æ–∑ —Ñ–∞–∑–∏ –º—ñ—Å—è—Ü—è –Ω–∞ —Ç—Ä–∏ –¥–Ω—ñ.\n\n"
            for forecast in weather.forecasts:
                translation = translator.translate(forecast.astronomy.moon_phase.__str__())
                resp_msg += f"–î–∞—Ç–∞: {forecast.date}\n"
                resp_msg += f"–§–∞–∑–∞ –º—ñ—Å—è—Ü—è: {translation}\n"
                resp_msg += f"–ú—ñ—Å—è—á–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è - {forecast.astronomy.moon_illumination}%\n\n"

        await call.message.answer(resp_msg)


async def process_hourly_forecasts(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['language'] == "üá¨üáß English":
            await call.message.edit_text(text="Please choose day of the hourly forecast:",
                                         reply_markup=markups.hourly_forecasts_catalog)
        else:
            await call.message.edit_text(text="–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:",
                                         reply_markup=markups.hourly_forecasts_catalog_ua)


async def hourly_forecasts_today(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        city = data['city']
        language = data['language']
        weather = await client.get(city)
        forecast_data = data_forecast(weather, 0)

        image_converter = ImageConverter(language, forecast_data['time'], forecast_data['temperature'],
                                         forecast_data['description'], forecast_data['kind'])
        image_converter.forecast("today")

    photo = open('Forecasts/Today_forecast.png', 'rb')
    t_lowest = min(forecast_data['temperature'])
    t_highest = max(forecast_data['temperature'])

    if language == "üá¨üáß English":
        message = f"{city}, Temperature will be from {t_lowest} to {t_highest}¬∞C"
    else:
        message = f"{city}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—É–¥–µ –≤—ñ–¥ {t_lowest} –¥–æ {t_highest}¬∞C"

    await call.message.answer_photo(photo, caption=message)


async def hourly_forecasts_tomorrow(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        city = data['city']
        language = data['language']
        weather = await client.get(city)
        forecast_data = data_forecast(weather, 1)

        image_converter = ImageConverter(language, forecast_data['time'], forecast_data['temperature'],
                                         forecast_data['description'], forecast_data['kind'])
        image_converter.forecast("tomorrow")

    photo = open('Forecasts/Tomorrow_forecast.png', 'rb')
    t_lowest = min(forecast_data['temperature'])
    t_highest = max(forecast_data['temperature'])

    if language == "üá¨üáß English":
        message = f"{city}, Temperature will be from {t_lowest} to {t_highest}¬∞C"
    else:
        message = f"{city}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—É–¥–µ –≤—ñ–¥ {t_lowest} –¥–æ {t_highest}¬∞C"

    await call.message.answer_photo(photo, caption=message)


async def hourly_forecasts_day_after_tomorrow(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        city = data['city']
        language = data['language']
        weather = await client.get(city)
        forecast_data = data_forecast(weather, 2)

        image_converter = ImageConverter(language, forecast_data['time'], forecast_data['temperature'],
                                         forecast_data['description'], forecast_data['kind'])
        image_converter.forecast("day after tomorrow")

    photo = open('Forecasts/Day_After_Tomorrow_forecast.png', 'rb')
    t_lowest = min(forecast_data['temperature'])
    t_highest = max(forecast_data['temperature'])

    if language == "üá¨üáß English":
        message = f"{city}, Temperature will be from {t_lowest} to {t_highest}¬∞C"
    else:
        message = f"{city}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—É–¥–µ –≤—ñ–¥ {t_lowest} –¥–æ {t_highest}¬∞C"

    await call.message.answer_photo(photo, caption=message)


async def process_daily_forecasts(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        weather = await client.get(data['city'])
        language = data['language']
        if language == "üá¨üáß English":
            resp_msg = "Three-day temperature forecast.\n\n"
        else:
            resp_msg = "–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –Ω–∞ —Ç—Ä–∏ –¥–Ω—ñ.\n\n"

        for forecast in weather.forecasts:
            day = forecast.date
            t_lowest = forecast.lowest_temperature
            t_highest = forecast.highest_temperature

            if language == "üá¨üáß English":
                descriptions = ", ".join(set(h.description for h in forecast.hourly))
                resp_msg += f"Date: {day}\n"
                resp_msg += f"Temperature will be from {t_lowest} to {t_highest}¬∞C\n"
                resp_msg += f"Description: {descriptions}\n\n"
            else:
                translation = ", ".join(set(translator.translate(h.description) for h in forecast.hourly))
                resp_msg += f"–î–∞—Ç–∞: {day}\n"
                resp_msg += f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—É–¥–µ –≤—ñ–¥ {t_lowest} –¥–æ {t_highest}¬∞C\n"
                resp_msg += f"–û–ø–∏—Å –ø–æ–≥–æ–¥–∏: {translation}\n\n"

        await call.message.answer(resp_msg)


def register_handlers_client(dp: Dispatcher):
    # ----Commands----
    dp.register_message_handler(command_start, commands=["start", "weather", "language"], state='*')
    dp.register_message_handler(command_help, commands="help", state='*')
    # ----Set a language----
    dp.register_message_handler(process_language, text=["üá¨üáß English", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"], state=Form.language)
    # ----Set a city----
    dp.register_message_handler(process_city, state=Form.city)
    # ----Inline buttons----
    dp.register_callback_query_handler(return_to_main_menu, text=["‚¨ÖÔ∏è Main menu", '‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'], state=Form.city)
    dp.register_callback_query_handler(process_temperature, text=['üå°Ô∏è Temperature', 'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'], state=Form.city)
    dp.register_callback_query_handler(process_moon_phase, text=['üåó Moon phase', 'üåó –§–∞–∑–∞ –º—ñ—Å—è—Ü—è'], state=Form.city)
    dp.register_callback_query_handler(process_visibility, text=['üëÅÔ∏èüëÅÔ∏è Visibility', 'üëÅÔ∏èüëÅÔ∏è –í–∏–¥–∏–º—ñ—Å—Ç—å'], state=Form.city)
    dp.register_callback_query_handler(process_wind_speed, text=['üí® Wind speed', 'üí® –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É'], state=Form.city)
    dp.register_callback_query_handler(process_hourly_forecasts, text=['üïó Hourly forecasts', 'üïó –ü–æ–≥–æ–¥. –ø—Ä–æ–≥–Ω–æ–∑'], state=Form.city)
    dp.register_callback_query_handler(process_daily_forecasts, text=['üìÖ Daily forecasts', 'üìÖ –©–æ–¥–µ–Ω. –ø—Ä–æ–≥–Ω–æ–∑'], state=Form.city)
    dp.register_callback_query_handler(process_humidity, text=['üíß Humidity', 'üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å'], state=Form.city)
    dp.register_callback_query_handler(process_sun_rise_set, text=['üåá Sunrise, sunset', 'üåá –°—Ö—ñ–¥, –ó–∞—Ö—ñ–¥'], state=Form.city)
    dp.register_callback_query_handler(process_closing, text=['üèôÔ∏è Another city', 'üèôÔ∏è –Ü–Ω—à–µ –º—ñ—Å—Ç–æ'], state=Form.city)
    dp.register_callback_query_handler(hourly_forecasts_today, text=[f'{date.today()}'], state=Form.city)
    dp.register_callback_query_handler(hourly_forecasts_tomorrow, text=[f'{date.tomorrow()}'], state=Form.city)
    dp.register_callback_query_handler(hourly_forecasts_day_after_tomorrow, text=[f'{date.day_after_tomorrow()}'], state=Form.city)
